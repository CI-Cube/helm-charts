# Default values for chart.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

annotations: {reloader.stakater.com/auto: "true"}

cubeReplicas:
  cubeApi: 1
  cubeRefreshWorker: 1
  cubestoreRouter: 1
  cubestoreWorker: 1

image:
  repository: ghcr.io/ci-cube/cicube-api/api
  tag: "sha-a19f4d8"
  pullPolicy: IfNotPresent

imagePullSecrets:
  - name: github
nameOverride: ""
fullnameOverride: ""

serviceAccount:
  create: true
  annotations: {}
  name: ""

podAnnotations: {}

podSecurityContext: {}

securityContext: {}

cubeApi:
  image: ghcr.io/ci-cube/cicube-api/cube
  pullPolicy: Always
  service:
    type: ClusterIP
    port: 4000
    service_port: 4000
  replicas: 1  
  configmap: 
    name: cubeapi-cm  
  env:
    var:
      CUBEJS_DB_TYPE: postgres
      CUBEJS_DEV_MODE: "false"
      CUBEJS_DB_HOST: "{{ .Release.Name }}-postgresql"
      CUBEJS_DB_NAME: "{{ .Values.DATABASE_NAME }}"
      CUBEJS_DB_USER: "{{ .Values.DATABASE_USER }}"
      CUBEJS_DB_PASS: "{{ .Values.DATABASE_PASSWORD }}"
      CUBEJS_DB_SSL: "true"
      CUBEJS_DEFAULT_API_SCOPES: "graphql,meta,data,jobs"
      CUBEJS_CUBESTORE_HOST: "cubestore-router"
      CUBEJS_LOG_LEVEL: "trace"
      CUBEJS_API_SECRET: "{{ .Values.JWT_SECRET }}"
      REDIS_URL: "redis://{{ .Release.Name }}-redis-master:6379"

cubeRefreshWorker:
  image: ghcr.io/ci-cube/cicube-api/cube
  pullPolicy: Always
  service:
    type: ClusterIP
    port: 80
    service_port: 80
  replicas: 1  
  configmap: 
    name: cuberefreshworker-cm 
  env:
    var:
      CUBEJS_DB_TYPE: postgres
      CUBEJS_DEV_MODE: "false"
      CUBEJS_DB_HOST: "{{ .Release.Name }}-postgresql"
      CUBEJS_DB_NAME: "{{ .Values.DATABASE_NAME }}"
      CUBEJS_DB_USER: "{{ .Values.DATABASE_USER }}"
      CUBEJS_DB_PASS: "{{ .Values.DATABASE_PASSWORD }}"
      CUBEJS_DB_SSL: "true"
      CUBEJS_DEFAULT_API_SCOPES: "graphql,meta,data,jobs"
      CUBEJS_CUBESTORE_HOST: "cubestore-router"
      CUBEJS_REFRESH_WORKER: "true"
      CUBEJS_LOG_LEVEL: "trace"
      CUBEJS_API_SECRET: "{{ .Values.JWT_SECRET }}"
      REDIS_URL: "redis://{{ .Release.Name }}-redis-master:6379"

cubestoreRouter:
  image: "cubejs/cubestore:latest" 
  pullPolicy: IfNotPresent
  service:
    type: ClusterIP
    port: 9999
    service_port: 9999
  replicas: 1   
  configmap: 
    name: cubestorerouter-cm 
  env:
    var:
      CUBESTORE_REMOTE_DIR: "/cube/data"
      CUBESTORE_META_PORT: "9999"
      CUBESTORE_SERVER_NAME: "cubestore-router:9999"
      CUBEJS_LOG_LEVEL: "trace" 

cubestoreWorker:
  image: "cubejs/cubestore:latest"
  pullPolicy: IfNotPresent  
  service:
    type: ClusterIP
    port: 10001
    service_port: 10001
  replicas: 1
  configmap: 
    name: cubestoreworker-cm 
  env:
    var:
      CUBESTORE_SERVER_NAME: "cubestore-worker-0.cubestore-worker:10001"
      CUBESTORE_WORKER_PORT: "10001"
      CUBESTORE_REMOTE_DIR: "/cube/data"
      CUBESTORE_META_ADDR: "cubestore-router:9999"
      CUBEJS_LOG_LEVEL: "trace"

ingress:
  enabled: true
  annotations:
    cert-manager.io/issuer: "letsencrypt-prod"
  hosts:
    - host: cube.cicube.io
      paths:
        - path: /
          pathType: ImplementationSpecific
  tls:
    - secretName: cube.cicube.io-tls
      hosts:
        - cube.cicube.io

resources: {}

autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80

nodeSelector: {}

tolerations: []

affinity: {}

postgresql:
  enabled: true
  auth:
    username: "{{ .Values.DATABASE_USER }}"
    password: "{{ .Values.DATABASE_PASSWORD }}"
    database: "{{ .Values.DATABASE_NAME }}"
  primary:
    persistence:
      enabled: true
      size: 8Gi

redis:
  architecture: standalone
  auth:
    enabled: false
  master:
    persistence:
      enabled: true
      size: 8Gi

api:
  replicaCount: 1
  image:
    repository: ghcr.io/ci-cube/cicube-api/api
    tag: "sha-a19f4d8"
    pullPolicy: IfNotPresent
  
  service:
    type: ClusterIP
    port: 80
  
  ingress:
    enabled: true
    className: ""
    annotations:
      cert-manager.io/issuer: "letsencrypt-prod"
    hosts:
      - host: test.cicube.io
        paths:
          - path: /
            pathType: ImplementationSpecific
    tls:
      - secretName: api.cicube.io-tls2
        hosts:
          - test.cicube.io
  
  resources: {}
  
  nodeSelector: {}
  tolerations: []
  affinity: {}