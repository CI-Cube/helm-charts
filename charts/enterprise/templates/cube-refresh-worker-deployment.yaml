{{- if .Values.cube.refreshWorker.enabled }}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Release.Name }}-cube-refresh-worker
  labels:
    app: {{ .Release.Name }}-cube-refresh-worker
    {{- include "enterprise.labels" . | nindent 4 }}
spec:
  replicas: {{ .Values.cube.refreshWorker.replicaCount }}
  selector:
    matchLabels:
      app: {{ .Release.Name }}-cube-refresh-worker
  template:
    metadata:
      labels:
        app: {{ .Release.Name }}-cube-refresh-worker
        {{- include "enterprise.labels" . | nindent 8 }}
    spec:
      {{- with .Values.cube.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      volumes:
        - name: cube-pv
          persistentVolumeClaim:
            claimName: cube-pvc
      containers:
        - name: cube-refresh-worker
          image: "{{ .Values.cube.image.registry }}/{{ .Values.cube.image.repository }}:{{ .Values.cube.image.tag }}"
          command: ["node"]
          args: ["index.js"]
          ports:
            - name: http
              containerPort: {{ .Values.cube.refreshWorker.service.port }}
              protocol: TCP
          envFrom:
            - configMapRef:
                name: {{ .Values.cube.refreshWorker.configmap.name }}
          resources:
            {{- toYaml .Values.cube.refreshWorker.resources | nindent 12 }}
          volumeMounts:
            - mountPath: /cube/conf
              name: cube-pv
          livenessProbe:
            httpGet:
              path: /readiness
              port: http
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 3
          readinessProbe:
            httpGet:
              path: /readiness
              port: http
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 3
{{- end }} 