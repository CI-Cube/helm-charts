{{- if .Values.cube.cubestore.enabled }}
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ .Release.Name }}-cubestore-worker
  labels:
    app: {{ .Release.Name }}-cubestore-worker
    {{- include "enterprise.labels" . | nindent 4 }}
spec:
  serviceName: {{ .Release.Name }}-cubestore-worker
  replicas: {{ .Values.cube.cubestore.worker.replicaCount }}
  selector:
    matchLabels:
      app: {{ .Release.Name }}-cubestore-worker
  template:
    metadata:
      labels:
        app: {{ .Release.Name }}-cubestore-worker
        {{- include "enterprise.labels" . | nindent 8 }}
    spec:
      {{- with .Values.cube.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      volumes:
        - name: cubestore-pv
          persistentVolumeClaim:
            claimName: cubestore-pvc
      initContainers:
        - name: init-router
          image: busybox
          command: ['sh', '-c', 'until nc -vz {{ .Release.Name }}-cubestore-router:{{ .Values.cube.cubestore.router.service.port }}; do echo "Waiting for router"; sleep 2; done;']
      containers:
        - name: cubestore-worker
          image: "{{ .Values.cube.image.registry }}/{{ .Values.cube.image.repository }}:{{ .Values.cube.image.tag }}"
          ports:
            - name: http
              containerPort: {{ .Values.cube.cubestore.worker.service.port }}
              protocol: TCP
          envFrom:
            - configMapRef:
                name: {{ .Values.cube.cubestore.worker.configmap.name }}
          env:
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: CUBESTORE_SERVER_NAME
              value: "$(POD_NAME).{{ .Release.Name }}-cubestore-worker:{{ .Values.cube.cubestore.worker.service.port }}"
          resources:
            {{- toYaml .Values.cube.cubestore.worker.resources | nindent 12 }}
          volumeMounts:
            - mountPath: /cube/data
              name: cubestore-pv
          livenessProbe:
            httpGet:
              path: /readiness
              port: http
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 3
          readinessProbe:
            httpGet:
              path: /readiness
              port: http
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 3
  {{- if .Values.cube.cubestore.persistence.enabled }}
  volumeClaimTemplates:
    - metadata:
        name: data
      spec:
        accessModes: [ "ReadWriteOnce" ]
        {{- if .Values.cube.cubestore.persistence.storageClass }}
        storageClassName: {{ .Values.cube.cubestore.persistence.storageClass }}
        {{- end }}
        resources:
          requests:
            storage: {{ .Values.cube.cubestore.persistence.size }}
  {{- end }}
{{- end }} 