{{- if .Values.cube.cubestore.enabled }}
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ .Release.Name }}-cubestore-router
  labels:
    app: {{ .Release.Name }}-cubestore-router
    {{- include "enterprise.labels" . | nindent 4 }}
spec:
  serviceName: {{ .Release.Name }}-cubestore-router
  replicas: {{ .Values.cube.cubestore.router.replicaCount }}
  selector:
    matchLabels:
      app: {{ .Release.Name }}-cubestore-router
  template:
    metadata:
      labels:
        app: {{ .Release.Name }}-cubestore-router
        {{- include "enterprise.labels" . | nindent 8 }}
    spec:
      {{- with .Values.cube.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      volumes:
        - name: cubestore-pv
          persistentVolumeClaim:
            claimName: cubestore-pvc
      containers:
        - name: cubestore-router
          image: "{{ .Values.cube.image.registry }}/{{ .Values.cube.image.repository }}:{{ .Values.cube.image.tag }}"
          command: ["/bin/sh","-c"]
          args: ["unset CUBESTORE_WORKER_PORT; ./cubestored"]
          ports:
            - name: http
              containerPort: {{ .Values.cube.cubestore.router.service.port }}
              protocol: TCP
            - name: http2
              containerPort: 3030
              protocol: TCP
            - name: mysql
              containerPort: 3306
              protocol: TCP
          envFrom:
            - configMapRef:
                name: {{ .Values.cube.cubestore.router.configmap.name }}
          env:
            - name: CUBESTORE_WORKERS
              value: {{ $count := .Values.cube.cubestore.worker.replicaCount | int }}{{- $networkAppPort := .Values.cube.cubestore.worker.service.port -}}
              {{- range $i := until $count }}{{ if $i }},{{ end }}{{ $.Release.Name }}-cubestore-worker-{{ $i }}.{{ $.Release.Name }}-cubestore-worker:{{ $networkAppPort }}{{- end }}
          resources:
            {{- toYaml .Values.cube.cubestore.router.resources | nindent 12 }}
          volumeMounts:
            - mountPath: /cube/data
              name: cubestore-pv
          livenessProbe:
            httpGet:
              path: /readiness
              port: http
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 3
          readinessProbe:
            httpGet:
              path: /readiness
              port: http
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 3
  {{- if .Values.cube.cubestore.persistence.enabled }}
  volumeClaimTemplates:
    - metadata:
        name: data
      spec:
        accessModes: [ "ReadWriteOnce" ]
        {{- if .Values.cube.cubestore.persistence.storageClass }}
        storageClassName: {{ .Values.cube.cubestore.persistence.storageClass }}
        {{- end }}
        resources:
          requests:
            storage: {{ .Values.cube.cubestore.persistence.size }}
  {{- end }}
{{- end }} 