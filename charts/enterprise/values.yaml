# Global configurations
global:
  # Image pull secrets for all deployments
  imagePullSecrets:
    - name: github
  domain: "example.com"
  environment: "production"

# Component enablement
api:
  enabled: true
  image:
    repository: ghcr.io/ci-cube/cicube-api/api
    pullPolicy: IfNotPresent
  ingress:
    enabled: true
    annotations:
      cert-manager.io/issuer: "letsencrypt-prod"
    hosts:
      - host: api.example.com
        paths:
          - path: /
            pathType: ImplementationSpecific
    tls:
      - secretName: "api-tls"
        hosts:
          - api.example.com
  
  # Database configurations
  database:
    type: "postgres"
    host: "{{ .Release.Name }}-postgresql"
    port: 5432
    name: "halley"
    user: "postgres"
    password: "postgres123"
    sslMode: "disable"

  # Redis configurations for Bitnami Redis chart
  redis:
    enabled: true
    nameOverride: "api-redis"
    fullnameOverride: "api-redis"
    global:
      redis:
        password: null
    architecture: standalone
    auth:
      enabled: false
    master:
      persistence:
        enabled: false
      service:
        ports:
          redis: 6379
    replica:
      replicaCount: 0
      persistence:
        enabled: false

  # API Secret Values
  DATABASE_HOST: "${api.database.host}"
  DATABASE_USER: "${api.database.user}"
  DATABASE_PASSWORD: "${api.database.password}"
  DATABASE_NAME: "${api.database.name}"
  DATABASE_SSL_MODE: "${api.database.sslMode}"
  REDIS_HOST: "{{ .Release.Name }}-api-redis-master"
  REDIS_PORT: "6379"
  JWT_SECRET: ""
  GITHUB_CLIENT_ID: ""
  GITHUB_CLIENT_SECRET: ""
  GOOGLE_CLIENT_ID: ""
  GOOGLE_CLIENT_SECRET: ""
  WEB_URL: "https://app.example.com"
  API_URL: "https://api.example.com"
  SMTP_USERNAME: ""
  SMTP_PASSWORD: ""
  CUBE_API_URL: "http://cube-api.default.svc.cluster.local:4000/cubejs-api/v1"
  LOOPS_API_KEY: ""

cubejs:
  enabled: true
  annotations: 
    reloader.stakater.com/auto: "true"
  
  imagePullSecrets:
    - name: github

  nameOverride: ""
  fullnameOverride: ""

  serviceAccount:
    create: true
    annotations: {}
    name: ""

  podAnnotations: {}
  podSecurityContext: {}
  securityContext: {}

  resources: {}
  nodeSelector: {}
  tolerations: []
  affinity: {}

  autoscaling:
    enabled: false
    minReplicas: 1
    maxReplicas: 100
    targetCPUUtilizationPercentage: 80

  ingress:
    enabled: true
    annotations:
      cert-manager.io/issuer: "letsencrypt-prod"
    hosts:
      - host: cube.example.com
        paths:
          - path: /
            pathType: ImplementationSpecific
    tls:
      - secretName: "cube-tls"
        hosts:
          - cube.example.com

  cubeApi:
    image: ghcr.io/ci-cube/cicube-api/cube
    pullPolicy: Always
    service:
      type: ClusterIP
      port: 4000
      service_port: 4000
    replicas: 3
    configmap:
      name: cubeapi-cm
    env:
      var:
        CUBEJS_DB_TYPE: "${api.database.type}"
        CUBEJS_DB_HOST: "${api.database.host}"
        CUBEJS_DB_NAME: "${api.database.name}"
        CUBEJS_DB_USER: "${api.database.user}"
        CUBEJS_DB_PASS: "${api.database.password}"
        CUBEJS_DB_SSL: "${api.database.sslMode}"
        CUBEJS_DEV_MODE: "false"
        CUBEJS_DEFAULT_API_SCOPES: "graphql,meta,data,jobs"
        CUBEJS_CUBESTORE_HOST: "cubestore-router"
        CUBEJS_LOG_LEVEL: "trace"

  cubeRefreshWorker:
    image: ghcr.io/ci-cube/cicube-api/cube
    pullPolicy: Always
    service:
      type: ClusterIP
      port: 80
      service_port: 80
    replicas: 1
    configmap:
      name: cuberefreshworker-cm
    env:
      var:
        CUBEJS_DB_TYPE: "${api.database.type}"
        CUBEJS_DB_HOST: "${api.database.host}"
        CUBEJS_DB_NAME: "${api.database.name}"
        CUBEJS_DB_USER: "${api.database.user}"
        CUBEJS_DB_PASS: "${api.database.password}"
        CUBEJS_DB_SSL: "${api.database.sslMode}"
        CUBEJS_DEV_MODE: "false"
        CUBEJS_REFRESH_WORKER: "true"
        CUBEJS_LOG_LEVEL: "trace"

  cubestoreRouter:
    image: "cubejs/cubestore:latest"
    pullPolicy: IfNotPresent
    service:
      type: ClusterIP
      port: 9999
      service_port: 9999
    replicas: 2
    configmap:
      name: cubestorerouter-cm
    env:
      var:
        CUBESTORE_REMOTE_DIR: "/cube/data"
        CUBESTORE_META_PORT: "9999"
        CUBESTORE_SERVER_NAME: "cubestore-router:9999"
        CUBEJS_LOG_LEVEL: "trace"

  cubestoreWorker:
    image: "cubejs/cubestore:latest"
    pullPolicy: IfNotPresent
    service:
      type: ClusterIP
      port: 10001
      service_port: 10001
    replicas: 2
    configmap:
      name: cubestoreworker-cm
    env:
      var:
        CUBESTORE_SERVER_NAME: "cubestore-worker-0.cubestore-worker:10001"
        CUBESTORE_WORKER_PORT: "10001"
        CUBESTORE_REMOTE_DIR: "/cube/data"
        CUBESTORE_META_ADDR: "cubestore-router:9999"
        CUBEJS_LOG_LEVEL: "trace"

# PostgreSQL configuration
postgresql:
  enabled: true
  auth:
    username: "${api.database.user}"
    password: "${api.database.password}"
    database: "${api.database.name}"
  primary:
    persistence:
      enabled: false
      size: 10Gi